From 3d301974b038d5231e9ad3704d31f20938c7e752 Mon Sep 17 00:00:00 2001
From: Deepanshi <deepanshi.singh710@gmail.com>
Date: Tue, 27 Sep 2022 15:05:32 +0530
Subject: [PATCH] Create Patch File

---
 src/App.tsx   | 21 ++++++++++++++++++---
 src/Graph.tsx | 13 +++++++++++--
 2 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..f28cd1a 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,20 +31,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph) {
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x=0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+        this.setState({ 
+           data: serverResponds,
+           showGraph: true,
+         });
+      });
+    x++;
+    if(x>1000){
+      clearInterval(interval);
+       }
+    }, 100);
   }
 
+
   /**
    * Render the App react component
    */
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..0a593fb 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement{
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view' ,'y_line');
+      elem.setAttribute('column-pivots' , '["stock"]');
+      elem.setAttribute('row-pivots' , '["timestamp"]');
+      elem.setAttribute('columns' , '["top_ask_price"]');
+      elem.setAttribute('aggregates', `
+     { "stock":"distinct count",
+        "top_ask_price" : "avg",
+        "top_bid_price" : "avg",
+        "timestamp" : "distinct count"}`);
     }
   }
 
-- 
2.37.3.windows.1

